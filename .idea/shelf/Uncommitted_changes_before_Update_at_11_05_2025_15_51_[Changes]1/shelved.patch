Index: app/src/main/java/com/example/powerfit/view/LoginScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.powerfit.view\r\n\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Email\r\nimport androidx.compose.material.icons.filled.Lock\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport com.example.powerfit.model.User\r\nimport com.example.powerfit.R\r\n\r\n@Composable\r\nfun LoginScreen(navController: NavController) {\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var errorMessage by remember { mutableStateOf(\"\") }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                brush = Brush.verticalGradient(\r\n                    colors = listOf(\r\n                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),\r\n                        MaterialTheme.colorScheme.background\r\n                    )\r\n                )\r\n            )\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(24.dp)\r\n                .imePadding(),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            // App Logo\r\n            Image(\r\n                painter = painterResource(id = R.drawable.logo),\r\n                contentDescription = \"PowerFit Logo\",\r\n                modifier = Modifier\r\n                    .size(160.dp)\r\n                    .padding(bottom = 6.dp)\r\n            )\r\n\r\n            // Text\r\n            Text(\r\n                text = \"PowerFit\",\r\n                fontSize = 24.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                color = MaterialTheme.colorScheme.primary,\r\n                modifier = Modifier.padding(bottom = 26.dp)\r\n            )\r\n\r\n            // Login Form\r\n            Card(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clip(RoundedCornerShape(16.dp)),\r\n                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(24.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally\r\n                ) {\r\n                    Text(\r\n                        text = \"Login\",\r\n                        fontSize = 20.sp,\r\n                        fontWeight = FontWeight.SemiBold,\r\n                        modifier = Modifier.padding(bottom = 16.dp)\r\n                    )\r\n\r\n                    // Email Field\r\n                    OutlinedTextField(\r\n                        value = email,\r\n                        onValueChange = {\r\n                            email = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Email\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Email,\r\n                                contentDescription = \"Email Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Email,\r\n                            imeAction = ImeAction.Next\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 16.dp)\r\n                    )\r\n\r\n                    // Password Field\r\n                    OutlinedTextField(\r\n                        value = password,\r\n                        onValueChange = {\r\n                            password = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Password\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Lock,\r\n                                contentDescription = \"Password Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        visualTransformation = PasswordVisualTransformation(),\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Password,\r\n                            imeAction = ImeAction.Done\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 8.dp)\r\n                    )\r\n\r\n                    // Error Message\r\n                    AnimatedVisibility(visible = errorMessage.isNotEmpty()) {\r\n                        Text(\r\n                            text = errorMessage,\r\n                            color = MaterialTheme.colorScheme.error,\r\n                            fontSize = 14.sp,\r\n                            modifier = Modifier.padding(vertical = 8.dp)\r\n                        )\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                    // Login Button\r\n                    Button(\r\n                        onClick = {\r\n                            val user = User(\r\n                                name = \"\", email = email, password = password, confirmPassword = password, profileImage = 0\r\n                            )\r\n                            if (user.isValid() && email == \"narak@example.com\" && password == \"password123\") {\r\n                                // Se as credenciais forem válidas, navegue para a HomeScreen\r\n                                navController.navigate(\"home\") {\r\n                                    // Limpa a pilha de navegação para que o usuário não volte para a tela de login\r\n                                    popUpTo(\"login\") { inclusive = true }\r\n                                }\r\n                            } else {\r\n                                errorMessage = \"Credenciais inválidas\"\r\n                            }\r\n                        },\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .height(56.dp),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        colors = ButtonDefaults.buttonColors(\r\n                            containerColor = MaterialTheme.colorScheme.primary\r\n                        )\r\n                    ) {\r\n                        Text(\r\n                            \"ENTRAR\",\r\n                            fontSize = 16.sp,\r\n                            fontWeight = FontWeight.Bold\r\n                        )\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(8.dp))\r\n\r\n                    //Redefine Password\r\n                    Row(\r\n                        modifier = Modifier.padding(top = 8.dp, bottom = 0.dp),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            \"Esqueceu a senha?\",\r\n                            color = MaterialTheme.colorScheme.onBackground\r\n                        )\r\n                        TextButton(onClick = { navController.navigate(\"recover\") }) {\r\n                            Text(\r\n                                \"Recupere-a\",\r\n                                fontWeight = FontWeight.Bold,\r\n                                color = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    // Register Option\r\n                    Row(\r\n                        modifier = Modifier.padding(top = 0.dp),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            \"Não tem uma conta?\",\r\n                            color = MaterialTheme.colorScheme.onBackground\r\n                        )\r\n                        TextButton(onClick = { navController.navigate(\"register\") }) {\r\n                            Text(\r\n                                \"Registre-se\",\r\n                                fontWeight = FontWeight.Bold,\r\n                                color = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun PreviewLoginScreen() {\r\n    MaterialTheme {\r\n        LoginScreen(navController = NavController(LocalContext.current))\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/view/LoginScreen.kt b/app/src/main/java/com/example/powerfit/view/LoginScreen.kt
--- a/app/src/main/java/com/example/powerfit/view/LoginScreen.kt	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/src/main/java/com/example/powerfit/view/LoginScreen.kt	(date 1746988772365)
@@ -46,15 +46,19 @@
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
 import com.example.powerfit.model.User
 import com.example.powerfit.R
+import com.example.powerfit.model.UserSessionViewModel
+import com.google.firebase.auth.FirebaseAuth
 
 @Composable
 fun LoginScreen(navController: NavController) {
     var email by remember { mutableStateOf("") }
     var password by remember { mutableStateOf("") }
     var errorMessage by remember { mutableStateOf("") }
+    val viewModel: UserSessionViewModel = viewModel()
 
     Box(
         modifier = Modifier
@@ -182,17 +186,21 @@
                     // Login Button
                     Button(
                         onClick = {
-                            val user = User(
-                                name = "", email = email, password = password, confirmPassword = password, profileImage = 0
-                            )
-                            if (user.isValid() && email == "narak@example.com" && password == "password123") {
-                                // Se as credenciais forem válidas, navegue para a HomeScreen
-                                navController.navigate("home") {
-                                    // Limpa a pilha de navegação para que o usuário não volte para a tela de login
-                                    popUpTo("login") { inclusive = true }
-                                }
+                            if (email != null && password != null) {
+                                FirebaseAuth.getInstance()
+                                    .signInWithEmailAndPassword(email, password)
+                                    .addOnSuccessListener {
+                                        viewModel.loadUser() // Carrega dados do Firestore
+
+                                        navController.navigate("home") {
+                                            popUpTo("login") { inclusive = true }
+                                        }
+                                    }
+                                    .addOnFailureListener { e ->
+                                        errorMessage = "Erro ao fazer login: ${e.message}"
+                                    }
                             } else {
-                                errorMessage = "Credenciais inválidas"
+                                errorMessage = "Preencha todos os campos"
                             }
                         },
                         modifier = Modifier
Index: app/src/main/java/com/example/powerfit/model/User.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.powerfit.model\r\n\r\ndata class User(\r\n    val name: String,\r\n    val email: String,\r\n    val password: String,\r\n    val confirmPassword: String,\r\n    val profileImage: Int\r\n) {\r\n    fun isValid(): Boolean {\r\n        return email.isNotEmpty() && password.length >= 6 && password == confirmPassword\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/model/User.kt b/app/src/main/java/com/example/powerfit/model/User.kt
--- a/app/src/main/java/com/example/powerfit/model/User.kt	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/src/main/java/com/example/powerfit/model/User.kt	(date 1746986438255)
@@ -1,13 +1,9 @@
 package com.example.powerfit.model
 
 data class User(
-    val name: String,
-    val email: String,
-    val password: String,
-    val confirmPassword: String,
-    val profileImage: Int
-) {
-    fun isValid(): Boolean {
-        return email.isNotEmpty() && password.length >= 6 && password == confirmPassword
-    }
-}
+    val name: String = "",
+    val age: Int = 0,
+    val email: String = "",
+    val profileImage: Int = 0,
+    val isProfessor : Boolean = false
+)
Index: app/src/main/java/com/example/powerfit/controller/HomeController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.powerfit.controller\r\n\r\nimport androidx.navigation.NavController\r\nimport com.example.powerfit.model.User\r\nimport com.example.powerfit.R\r\n\r\nclass HomeController(navController: NavController) {\r\n    private val user = User(\r\n        name = \"Narak\",\r\n        email = \"narak@example.com\",\r\n        password = \"password123\",\r\n        confirmPassword = \"password123\",\r\n        profileImage = R.drawable.profile_icon\r\n    )\r\n\r\n    fun getUser() = user\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/controller/HomeController.kt b/app/src/main/java/com/example/powerfit/controller/HomeController.kt
--- a/app/src/main/java/com/example/powerfit/controller/HomeController.kt	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/src/main/java/com/example/powerfit/controller/HomeController.kt	(date 1746986981945)
@@ -2,16 +2,34 @@
 
 import androidx.navigation.NavController
 import com.example.powerfit.model.User
-import com.example.powerfit.R
+import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.auth.FirebaseAuth
+
+class HomeController(private val navController: NavController) {
+
+    fun getUser(callback: (User?) -> Unit) {
+        val uid = FirebaseAuth.getInstance().currentUser?.uid
 
-class HomeController(navController: NavController) {
-    private val user = User(
-        name = "Narak",
-        email = "narak@example.com",
-        password = "password123",
-        confirmPassword = "password123",
-        profileImage = R.drawable.profile_icon
-    )
+        if (uid == null) {
+            callback(null)
+            return
+        }
 
-    fun getUser() = user
+        FirebaseFirestore.getInstance()
+            .collection("usuarios")
+            .document(uid)
+            .get()
+            .addOnSuccessListener { document ->
+                if (document != null && document.exists()) {
+                    val user = document.toObject(User::class.java)
+                    callback(user)
+                } else {
+                    callback(null)
+                }
+            }
+            .addOnFailureListener {
+                callback(null)
+            }
+    }
 }
+
Index: app/src/main/java/com/example/powerfit/view/RegistrationScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.powerfit.view\r\n\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Email\r\nimport androidx.compose.material.icons.filled.Lock\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.powerfit.controller.RegistrationController\r\nimport com.example.powerfit.model.User\r\nimport com.example.powerfit.R\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun RegistrationScreen(navController: NavHostController, controller: RegistrationController) {\r\n    var name by remember { mutableStateOf(\"\") }\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var confirmPassword by remember { mutableStateOf(\"\") }\r\n    var errorMessage by remember { mutableStateOf(\"\") }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                brush = Brush.verticalGradient(\r\n                    colors = listOf(\r\n                        MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),\r\n                        MaterialTheme.colorScheme.background\r\n                    )\r\n                )\r\n            )\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            // App Logo\r\n            Image(\r\n                painter = painterResource(id = R.drawable.logo),\r\n                contentDescription = \"PowerFit Logo\",\r\n                modifier = Modifier\r\n                    .size(160.dp)\r\n                    .padding(bottom = 6.dp)\r\n            )\r\n\r\n            // Text\r\n            Text(\r\n                text = \"PowerFit\",\r\n                fontSize = 24.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                color = MaterialTheme.colorScheme.primary,\r\n                modifier = Modifier.padding(bottom = 26.dp)\r\n            )\r\n\r\n            // Registration Form\r\n            Card(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clip(RoundedCornerShape(16.dp)),\r\n                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(24.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally\r\n                ) {\r\n                    Text(\r\n                        text = \"Cadastro\",\r\n                        fontSize = 20.sp,\r\n                        fontWeight = FontWeight.SemiBold,\r\n                        modifier = Modifier.padding(bottom = 16.dp)\r\n                    )\r\n\r\n                    // Name Field\r\n                    OutlinedTextField(\r\n                        value = name,\r\n                        onValueChange = {\r\n                            name = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Nome\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Person,\r\n                                contentDescription = \"Name Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Text,\r\n                            imeAction = ImeAction.Next\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 16.dp)\r\n                    )\r\n\r\n                    // Email Field\r\n                    OutlinedTextField(\r\n                        value = email,\r\n                        onValueChange = {\r\n                            email = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Email\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Email,\r\n                                contentDescription = \"Email Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Email,\r\n                            imeAction = ImeAction.Next\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 16.dp)\r\n                    )\r\n\r\n                    // Password Field\r\n                    OutlinedTextField(\r\n                        value = password,\r\n                        onValueChange = {\r\n                            password = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Senha\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Lock,\r\n                                contentDescription = \"Password Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        visualTransformation = PasswordVisualTransformation(),\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Password,\r\n                            imeAction = ImeAction.Done\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 8.dp)\r\n                    )\r\n\r\n                    // Confirm Password Field\r\n                    OutlinedTextField(\r\n                        value = confirmPassword,\r\n                        onValueChange = {\r\n                            confirmPassword = it\r\n                            errorMessage = \"\"\r\n                        },\r\n                        label = { Text(\"Confirmar Senha\") },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                imageVector = Icons.Default.Lock,\r\n                                contentDescription = \"Confirm Password Icon\",\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        },\r\n                        singleLine = true,\r\n                        visualTransformation = PasswordVisualTransformation(),\r\n                        keyboardOptions = KeyboardOptions(\r\n                            keyboardType = KeyboardType.Password,\r\n                            imeAction = ImeAction.Done\r\n                        ),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 8.dp)\r\n                    )\r\n\r\n                    // Error Message\r\n                    AnimatedVisibility(visible = errorMessage.isNotEmpty()) {\r\n                        Text(\r\n                            text = errorMessage,\r\n                            color = MaterialTheme.colorScheme.error,\r\n                            fontSize = 14.sp,\r\n                            modifier = Modifier.padding(vertical = 8.dp)\r\n                        )\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                    // Register Button\r\n                    Button(\r\n                        onClick = {\r\n                            val user = User(name, email, password, confirmPassword, R.drawable.profile_image)\r\n                            if (user.isValid()) {\r\n                                controller.onRegisterSuccess()\r\n                            } else {\r\n                                errorMessage = \"Credenciais inválidas\"\r\n                            }\r\n                        },\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .height(56.dp),\r\n                        shape = RoundedCornerShape(12.dp),\r\n                        colors = ButtonDefaults.buttonColors(\r\n                            containerColor = MaterialTheme.colorScheme.primary\r\n                        )\r\n                    ) {\r\n                        Text(\r\n                            \"REGISTRAR\",\r\n                            fontSize = 16.sp,\r\n                            fontWeight = FontWeight.Bold\r\n                        )\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                    // Login Option\r\n                    Row(\r\n                        modifier = Modifier.padding(top = 16.dp),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            \"Já tem uma conta?\",\r\n                            color = MaterialTheme.colorScheme.onBackground\r\n                        )\r\n                        TextButton(onClick = { navController.navigate(\"login\") }) {\r\n                            Text(\r\n                                \"Faça login\",\r\n                                fontWeight = FontWeight.Bold,\r\n                                color = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewRegistrationScreen() {\r\n    MaterialTheme {\r\n        RegistrationScreen(\r\n            navController = rememberNavController(),\r\n            controller = RegistrationController()\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/view/RegistrationScreen.kt b/app/src/main/java/com/example/powerfit/view/RegistrationScreen.kt
--- a/app/src/main/java/com/example/powerfit/view/RegistrationScreen.kt	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/src/main/java/com/example/powerfit/view/RegistrationScreen.kt	(date 1746988880975)
@@ -1,5 +1,6 @@
 package com.example.powerfit.view
 
+import android.util.Log
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
@@ -51,6 +52,8 @@
 import com.example.powerfit.controller.RegistrationController
 import com.example.powerfit.model.User
 import com.example.powerfit.R
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
@@ -61,6 +64,9 @@
     var confirmPassword by remember { mutableStateOf("") }
     var errorMessage by remember { mutableStateOf("") }
 
+    val auth = FirebaseAuth.getInstance()
+    val firestore = FirebaseFirestore.getInstance()
+
     Box(
         modifier = Modifier
             .fillMaxSize()
@@ -239,12 +245,35 @@
                     // Register Button
                     Button(
                         onClick = {
-                            val user = User(name, email, password, confirmPassword, R.drawable.profile_image)
-                            if (user.isValid()) {
-                                controller.onRegisterSuccess()
-                            } else {
-                                errorMessage = "Credenciais inválidas"
+                            if((password == confirmPassword) && (email != null) && (password != null)){
+                                auth.createUserWithEmailAndPassword(email, password)
+                                    .addOnCompleteListener { task ->
+                                        if (task.isSuccessful) {
+                                            val uid = auth.currentUser?.uid ?: return@addOnCompleteListener
+
+                                            val user = User(name, 0, email, R.drawable.profile_image)
+
+                                            firestore.collection("usuarios")
+                                                .document(uid)
+                                                .set(user)
+                                                .addOnSuccessListener {
+                                                    Log.d("Firestore", "Usuário salvo com sucesso!")
+                                                    navController.navigate("home") {
+                                                        popUpTo("login") { inclusive = true }
+                                                    }
+                                                }
+                                                .addOnFailureListener {
+                                                    Log.e("Firestore", "Erro ao salvar: ${it.message}")
+                                                }
+                                        } else {
+                                            Log.e("Auth", "Erro ao cadastrar: ${task.exception?.message}")
+                                        }
+                                    }
+                            } else {
+                                errorMessage = "As senhas passadas são diferentes. Verifique e tente novamente!"
                             }
+
+
                         },
                         modifier = Modifier
                             .fillMaxWidth()
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1746980505959)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1746980505959)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
+  </state>
+</component>
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n    id(\"com.google.gms.google-services\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.powerfit\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.powerfit\"\r\n        minSdk = 24\r\n        targetSdk = 35\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(\"androidx.core:core-ktx:1.15.0\")\r\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.6.1\")\r\n    implementation(\"androidx.activity:activity-compose:1.7.2\")\r\n    implementation(platform(\"androidx.compose:compose-bom:2023.09.01\"))\r\n    implementation(\"androidx.compose.ui:ui:1.0.0\")\r\n    implementation(\"androidx.compose.ui:ui-graphics:1.0.0\")\r\n    implementation(\"androidx.compose.ui:ui-tooling-preview:1.0.0\")\r\n    implementation(\"androidx.compose.material3:material3:1.0.0\")\r\n    implementation(\"com.google.firebase:firebase-analytics\")\r\n    implementation(platform(\"com.google.firebase:firebase-bom:33.11.0\"))\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n    androidTestImplementation(\"androidx.compose.ui:ui-test-junit4:1.0.0\")\r\n    debugImplementation(\"androidx.compose.ui:ui-tooling:1.0.0\")\r\n    debugImplementation(\"androidx.compose.ui:ui-test-manifest:1.0.0\")\r\n\r\n    implementation(\"androidx.navigation:navigation-compose:2.8.9\")\r\n\r\n    implementation(\"com.jakewharton.threetenabp:threetenabp:1.4.6\")\r\n\r\n    implementation(\"com.google.android.exoplayer:exoplayer:2.19.1\")\r\n    implementation(\"com.google.android.exoplayer:exoplayer-ui:2.19.1\")\r\n//    implementation(\"com.google.android.exoplayer:extension-youtube:2.18.1\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/build.gradle.kts	(date 1746984828186)
@@ -49,8 +49,12 @@
     implementation("androidx.compose.ui:ui-graphics:1.0.0")
     implementation("androidx.compose.ui:ui-tooling-preview:1.0.0")
     implementation("androidx.compose.material3:material3:1.0.0")
+
+    implementation(platform("com.google.firebase:firebase-bom:33.13.0"))
     implementation("com.google.firebase:firebase-analytics")
-    implementation(platform("com.google.firebase:firebase-bom:33.11.0"))
+    implementation("com.google.firebase:firebase-auth")
+    implementation("com.google.firebase:firebase-firestore")
+
     testImplementation("junit:junit:4.13.2")
     androidTestImplementation("androidx.test.ext:junit:1.1.5")
     androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
Index: app/src/main/java/com/example/powerfit/model/UserSessionViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/model/UserSessionViewModel.kt b/app/src/main/java/com/example/powerfit/model/UserSessionViewModel.kt
new file mode 100644
--- /dev/null	(date 1746988398057)
+++ b/app/src/main/java/com/example/powerfit/model/UserSessionViewModel.kt	(date 1746988398057)
@@ -0,0 +1,28 @@
+package com.example.powerfit.model
+
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.State
+import androidx.lifecycle.ViewModel
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+
+class UserSessionViewModel : ViewModel() {
+    private val _user = mutableStateOf<User?>(null)
+    val user: State<User?> get() = _user
+
+    fun loadUser() {
+        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return
+
+        FirebaseFirestore.getInstance()
+            .collection("usuarios")
+            .document(uid)
+            .get()
+            .addOnSuccessListener { doc ->
+                _user.value = doc.toObject(User::class.java)
+            }
+    }
+
+    fun clearUser() {
+        _user.value = null
+    }
+}
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1746980505955)
+++ b/.idea/codeStyles/Project.xml	(date 1746980505955)
@@ -0,0 +1,123 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <JetCodeStyleSettings>
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </JetCodeStyleSettings>
+    <codeStyleSettings language="XML">
+      <option name="FORCE_REARRANGE_MODE" value="1" />
+      <indentOptions>
+        <option name="CONTINUATION_INDENT_SIZE" value="4" />
+      </indentOptions>
+      <arrangement>
+        <rules>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>xmlns:android</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>xmlns:.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*:id</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*:name</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>name</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>style</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>ANDROID_ATTRIBUTE_ORDER</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>.*</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+        </rules>
+      </arrangement>
+    </codeStyleSettings>
+    <codeStyleSettings language="kotlin">
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </codeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"MainActivity (1)\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"PreviewExerciseViewScreen\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"MainActivity (2)\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/.idea/deploymentTargetSelector.xml	(date 1746979953420)
@@ -5,15 +5,6 @@
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
-      <SelectionState runConfigName="MainActivity (1)">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="PreviewExerciseViewScreen">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="MainActivity (2)">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/example/powerfit/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.powerfit\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.ui.Modifier\r\nimport com.example.powerfit.navigation.MainScreen\r\nimport com.example.powerfit.ui.theme.PowerFitTheme\r\nimport com.jakewharton.threetenabp.AndroidThreeTen\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        AndroidThreeTen.init(this)\r\n        setContent {\r\n            PowerFitTheme {\r\n                Surface(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    color = MaterialTheme.colorScheme.background\r\n                ) {\r\n                    MainScreen()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/powerfit/MainActivity.kt b/app/src/main/java/com/example/powerfit/MainActivity.kt
--- a/app/src/main/java/com/example/powerfit/MainActivity.kt	(revision 3a98423ab65d329bae1224035fc4d5985adeb011)
+++ b/app/src/main/java/com/example/powerfit/MainActivity.kt	(date 1746980505415)
@@ -9,10 +9,12 @@
 import androidx.compose.ui.Modifier
 import com.example.powerfit.navigation.MainScreen
 import com.example.powerfit.ui.theme.PowerFitTheme
+import com.google.firebase.FirebaseApp
 import com.jakewharton.threetenabp.AndroidThreeTen
 
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
+        FirebaseApp.initializeApp(this)
         super.onCreate(savedInstanceState)
         AndroidThreeTen.init(this)
         setContent {
